@page "/product/create"
@page "/product/edit/{id:int}"
@using Microsoft.AspNetCore.Components
@using Ecommerce.Model
@using Ecommerce.Server.Helper
@inject ICategoryRepository CategoryRepository
@inject IProductRepository ProductRepository
@inject NavigationManager NavigationManager
@inject IFileUpload FileUpload
@inject IJSRuntime JsRuntime
@* @attribute [Authorize] *@

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>

    <div class="col-md-10">
        @if (IsLoading)
        {
             <div class="text-center">Loading...</div>
        }
        else
        {
        <EditForm Model="Product" OnValidSubmit="UpsertProduct">
            <DataAnnotationsValidator/>
            <div class="form-group">
                <label>Name</label>
                <InputText @bind-Value="Product.Name" class="form-control" />
                <ValidationMessage For="() => Product.Name" />
            </div>
             <div class="form-group">
                <label>Color</label>
                 <InputText @bind-Value="Product.Color" class="form-control" />
                 <ValidationMessage For="() => Product.Color" />
            </div>
            
             <div class="form-group">
                <label>Description</label>
                 <SfRichTextEditor @bind-Value="Product.Description"/>
                 <ValidationMessage For="() => Product.Description" />
            </div>

            <div class="row pt-3">
                <div class="form-group col-6">
                <div class="form-check">
                    <InputCheckbox @bind-Value="Product.ShopFavourites" class="form-check-input" />
                    <label class="form-check-label">Is Shop Favorites</label>
                </div>
                </div>
                <div class="form-group col-6">
                <div class="form-check">
                    <InputCheckbox @bind-Value="Product.CustomerFavourites" class="form-check-input" />
                    <label class="form-check-label">Is Customer Favorites</label>
                </div>
                </div>
                 <div class="form-group col-6">
                     <label>Category</label>
                    <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                        <option value="0" disabled selected>Select Category</option> 
                            @foreach(var category in Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }

                    </InputSelect>
                     <ValidationMessage For="() => Product.CategoryId" />
                </div>
                <div class="form-group pt-4 col-6">
                    <InputFile OnChange="HandleImageUpload" />
                </div>
            </div>

              
            <div class="form-group py-2">
                <button class="btn btn-primary">@Title</button>
                <NavLink href="product" class="btn btn-secondary">Back to Index</NavLink>
            </div>
        </EditForm>
        }
    </div>
    <div class="col-md-2 rounded-2">
        <img src="@Product.ImageUrl" class="w-100 rounded-2" alt="@Product.Name">
    </div>
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    private ProductDto Product { get; set; } = new()
    {
        ImageUrl = "/images/default.jpeg"
    };
    private IEnumerable<CategoryDto> Categories { get; set; } = new List<CategoryDto>();
    private string Title { get; set; } = "Create";
    private bool IsLoading { get; set; }
    private string? OldImageUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
        }

    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await CategoryRepository.GetAll();
        if (Id != 0 )
        {
            //update
            Title = "Update";
            Product = await ProductRepository.Get(Id);
            OldImageUrl = Product.ImageUrl;
        }

        IsLoading = false;
        StateHasChanged();
    }
    private  async Task UpsertProduct()
    {
        if (Product.Id == 0)
        {
            //create
            await ProductRepository.Create(Product);
            await JsRuntime.ToasterSuccess("Product created successfully.");
        }
        else
        {
            //update
             if (OldImageUrl != Product.ImageUrl)
             {
                 FileUpload.DeleteFile(OldImageUrl);
            
             }
            await ProductRepository.Update(Product);
            await JsRuntime.ToasterSuccess("Product updated successfully.");
        }
        NavigationManager.NavigateTo("product");


    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new(file.Name);
                    if (fileInfo.Extension.ToLowerInvariant() == ".jpg" ||
                      fileInfo.Extension.ToLowerInvariant() == ".png" ||
                      fileInfo.Extension.ToLowerInvariant() == ".jpeg")
                    {
                        Product.ImageUrl = await FileUpload.UploadFile(file);
                    }
                    else
                    {
                        await JsRuntime.ToasterError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }
            }
            IsLoading = false;
        }
        catch(Exception ex)
        {
             await JsRuntime.ToasterError(ex.Message);
        }
    }
}