@page "/category"
@using Ecommerce.Model
@inject ICategoryRepository CategoryRepository
@inject IJSRuntime JsRuntime
@* @attribute [Authorize(Roles = SD.Role_Admin)] *@

<DeleteModal IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete" Field="category"/>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">Add New Category </a>
    </div>
    <div class="col-12 p-3">
        @if (Categories.Any())
        {
            <table class="table table-bordered">
                 <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var category in Categories)
                    {
                        <tr>
                            <td>
                                @category.Name
                            </td> 
                            <td>
                            <NavLink href="@($"category/edit/{category.Id}")" class="btn-primary btn">Edit</NavLink>
                            <button class="btn btn-danger" @onclick="() => HandleDelete(category.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                <div class="text-center">Loading...</div>
                
            }
            else
            {
                <p>No recrods found.</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<CategoryDto> Categories { get; set; } = new List<CategoryDto>();
    private bool IsLoading { get; set; }
    private int DeleteCategoryId { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
        }
    }

    private async Task LoadCategories()
    {
        IsLoading=true;
        StateHasChanged();
        Categories = await CategoryRepository.GetAll();
        IsLoading=false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteCategoryId=id;
        JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    private async Task ConfirmDelete(bool isConfirmed)
    {
        IsLoading=true;
        if(isConfirmed && DeleteCategoryId != 0)
        {
            await CategoryRepository.Delete(DeleteCategoryId);
            await LoadCategories();
            await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading=false;
    }
}